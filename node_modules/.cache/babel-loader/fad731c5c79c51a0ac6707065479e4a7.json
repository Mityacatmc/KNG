{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\n\nfunction parse(query) {\n  if (typeof query !== \"string\") {\n    return {};\n  }\n\n  query = query.trim().replace(/^[?#&]/, \"\");\n\n  if (!query) {\n    return {};\n  }\n\n  var matches = /\\?(.+)$/gi.exec(query);\n  var str = matches ? matches[1] : query;\n  return str.split(\"&\").reduce(function (acc, item) {\n    var param = item.split(\"=\");\n\n    if (param[1]) {\n      acc[param[0]] = decodeURIComponent(param[1]);\n    }\n\n    return acc;\n  }, {});\n}\n/**\n   * URL encode the keys and values\n   *\n   * @default true\n   */\n\n/**\n* Skip keys with `null` as the value.\n* Keys with `undefined` as the value are always ignored.\n*\n* @default true\n*/\n\n\nfunction stringify(data) {\n  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n\n  if (typeof data !== \"object\" || data === null) {\n    return \"\";\n  }\n\n  options = _object_spread({\n    encode: true\n  }, options);\n\n  var encode = function encode(value) {\n    return options.encode ? encodeURIComponent(value) : String(value);\n  };\n\n  return Object.keys(data).reduce(function (acc, key) {\n    var value = data[key];\n\n    if (value === undefined) {\n      return acc;\n    }\n\n    if (value === null) {\n      if (!options.skipNull) {\n        acc.push([encode(key), \"\"].join(\"=\"));\n      }\n\n      return acc;\n    }\n\n    if (Array.isArray(value)) {\n      value.map(function (arrayItem) {\n        acc.push(\"\".concat(encode(key), \"[]=\").concat(encode(arrayItem)));\n      }).join();\n      return acc;\n    }\n\n    acc.push([encode(key), encode(value)].join(\"=\"));\n    return acc;\n  }, []).join(\"&\");\n}\n\nexport var querystring = {\n  parse: parse,\n  stringify: stringify\n};","map":{"version":3,"mappings":";;AAIA,SAASA,KAAT,CAAeC,KAAf,EAAkC;EAChC,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B,OAAO,EAAP;EACF;;EAEAA,QAAQA,MAAMC,IAAND,GAAaE,OAAbF,CAAqB,QAArBA,EAA+B,EAA/BA,CAARA;;EACA,IAAI,CAACA,KAAL,EAAY;IACV,OAAO,EAAP;EACF;;EAEA,IAAMG,UAAU,YAAYC,IAAZ,CAAiBJ,KAAjB,CAAhB;EACA,IAAMK,MAAMF,UAAUA,OAAO,CAAC,CAAD,CAAjBA,GAAuBH,KAAnC;EAEA,OAAOK,IAAIC,KAAJD,CAAU,GAAVA,EAAeE,MAAfF,CAAsB,UAACG,GAAD,EAAmBC,IAAnB,EAAmBA;IAC9C,IAAMC,QAAQD,KAAKH,KAALG,CAAW,GAAXA,CAAd;;IAEA,IAAIC,KAAK,CAAC,CAAD,CAAT,EAAc;MACZF,GAAG,CAACE,KAAK,CAAC,CAAD,CAAN,CAAHF,GAAgBG,mBAAmBD,KAAK,CAAC,CAAD,CAAxBC,CAAhBH;IACF;;IAEA,OAAOA,GAAP;EACF,CAROH,EAQJ,EARIA,CAAP;AASF;AAOE;;;;;;AAOA;;;;;;;;AASF,SAASO,SAAT,CAAmBC,IAAnB,EAAuC;MAAEC,2EAA4B;;EACnE,IAAI,OAAOD,IAAP,KAAgB,QAAhB,IAA4BA,SAAS,IAAzC,EAA+C;IAC7C,OAAO,EAAP;EACF;;EAEAC,UAAUC;IACRC,QAAQ;EADA,GAELF,OAFK,CAAVA;;EAKA,IAAME,SAAS,SAATA,MAAS,CAACC,KAAD,EAACA;IACd,OAAOH,QAAQE,MAARF,GAAiBI,mBAAmBD,KAAnBC,CAAjBJ,GAA6CK,OAAOF,KAAPE,CAApD;EACF,CAFA;;EAIA,OAAOC,OAAOC,IAAPD,CAAYP,IAAZO,EACJb,MADIa,CACa,UAACZ,GAAD,EAAMc,GAAN,EAAMA;IACtB,IAAML,QAAQJ,IAAI,CAACS,GAAD,CAAlB;;IAEA,IAAIL,UAAUM,SAAd,EAAyB;MACvB,OAAOf,GAAP;IACF;;IAEA,IAAIS,UAAU,IAAd,EAAoB;MAClB,IAAI,CAACH,QAAQU,QAAb,EAAuB;QACrBhB,IAAIiB,IAAJjB,CAAS,CAACQ,OAAOM,GAAPN,CAAD,EAAc,EAAd,EAAkBU,IAAlB,CAAuB,GAAvB,CAATlB;MACF;;MAEA,OAAOA,GAAP;IACF;;IAEA,IAAImB,MAAMC,OAAND,CAAcV,KAAdU,CAAJ,EAA0B;MACxBV,MACGY,GADHZ,CACO,UAACa,SAAD,EAACA;QACJtB,IAAIiB,IAAJjB,CAAS,GAAoBQ,MAApB,CAAGA,OAAOM,GAAPN,CAAH,EAAe,KAAf,EAAsCe,MAAtC,CAAoBf,OAAOc,SAAPd,CAApB,CAATR;MACF,CAHFS,EAIGS,IAJHT;MAKA,OAAOT,GAAP;IACF;;IAEAA,IAAIiB,IAAJjB,CAAS,CAACQ,OAAOM,GAAPN,CAAD,EAAcA,OAAOC,KAAPD,CAAd,EAA6BU,IAA7B,CAAkC,GAAlC,CAATlB;IACA,OAAOA,GAAP;EACF,CA3BKY,EA2BF,EA3BEA,EA4BJM,IA5BIN,CA4BC,GA5BDA,CAAP;AA6BF;;AAEA,OAAO,IAAMY,cAAc;EACzBjC,YADyB;EAEzBa;AAFyB,CAApB","names":["parse","query","trim","replace","matches","exec","str","split","reduce","acc","item","param","decodeURIComponent","stringify","data","options","_object_spread","encode","value","encodeURIComponent","String","Object","keys","key","undefined","skipNull","push","join","Array","isArray","map","arrayItem","concat","querystring"],"sources":["C:\\Users\\Ð¯\\Desktop\\myproject\\vk-miniapps\\Koto-app\\node_modules\\@vkontakte\\vkjs\\src\\querystring.ts"],"sourcesContent":["export interface ParsedQuery<T = string> {\n  [key: string]: T | T[] | null;\n}\n\nfunction parse(query: string | any): ParsedQuery {\n  if (typeof query !== 'string') {\n    return {};\n  }\n\n  query = query.trim().replace(/^[?#&]/, '');\n  if (!query) {\n    return {};\n  }\n\n  const matches = /\\?(.+)$/gi.exec(query);\n  const str = matches ? matches[1] : query;\n\n  return str.split('&').reduce((acc: ParsedQuery, item: string) => {\n    const param = item.split('=');\n\n    if (param[1]) {\n      acc[param[0]] = decodeURIComponent(param[1]);\n    }\n\n    return acc;\n  }, {});\n}\n\ntype StringifyQueryItem = string | boolean | number | null | undefined;\n\ntype StringifyQuery = Record<string, StringifyQueryItem | readonly StringifyQueryItem[]>;\n\ninterface StringifyOptions {\n  /**\n   * URL encode the keys and values\n   *\n   * @default true\n   */\n  encode?: boolean;\n\n  /**\n   * Skip keys with `null` as the value.\n   * Keys with `undefined` as the value are always ignored.\n   *\n   * @default true\n   */\n  skipNull?: true;\n}\n\nfunction stringify(data: StringifyQuery, options: StringifyOptions = {}): string {\n  if (typeof data !== 'object' || data === null) {\n    return '';\n  }\n\n  options = {\n    encode: true,\n    ...options,\n  };\n\n  const encode = (value: any): string => {\n    return options.encode ? encodeURIComponent(value) : String(value);\n  };\n\n  return Object.keys(data)\n    .reduce<string[]>((acc, key) => {\n      const value = data[key];\n\n      if (value === undefined) {\n        return acc;\n      }\n\n      if (value === null) {\n        if (!options.skipNull) {\n          acc.push([encode(key), ''].join('='));\n        }\n\n        return acc;\n      }\n\n      if (Array.isArray(value)) {\n        value\n          .map((arrayItem) => {\n            acc.push(`${encode(key)}[]=${encode(arrayItem)}`);\n          })\n          .join();\n        return acc;\n      }\n\n      acc.push([encode(key), encode(value)].join('='));\n      return acc;\n    }, [])\n    .join('&');\n}\n\nexport const querystring = {\n  parse,\n  stringify,\n};\n"]},"metadata":{},"sourceType":"module"}