{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nimport { classNames } from \"@vkontakte/vkjs\";\nimport { clamp } from \"../../helpers/math\";\nimport { useGlobalEventListener } from \"../../hooks/useGlobalEventListener\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { usePrevious } from \"../../hooks/usePrevious\";\nimport { useTimeout } from \"../../hooks/useTimeout\";\nimport { useDOM } from \"../../lib/dom\";\nimport { Platform } from \"../../lib/platform\";\nimport { runTapticImpactOccurred } from \"../../lib/taptic\";\nimport { useIsomorphicLayoutEffect } from \"../../lib/useIsomorphicLayoutEffect\";\nimport { useScroll } from \"../AppRoot/ScrollContext\";\nimport { FixedLayout } from \"../FixedLayout/FixedLayout\";\nimport { Touch } from \"../Touch/Touch\";\nimport TouchRootContext from \"../Touch/TouchContext\";\nimport { PullToRefreshSpinner } from \"./PullToRefreshSpinner\";\n\nfunction cancelEvent(event) {\n  if (!event) {\n    return false;\n  }\n\n  while (event.originalEvent) {\n    event = event.originalEvent;\n  }\n\n  if (event.preventDefault && event.cancelable) {\n    event.preventDefault();\n  }\n\n  if (event.stopPropagation) {\n    event.stopPropagation();\n  }\n\n  return false;\n}\n\nvar TOUCH_MOVE_EVENT_PARAMS = {\n  cancelable: true,\n  passive: false\n};\n/**\n * @see https://vkcom.github.io/VKUI/#/PullToRefresh\n */\n\nexport var PullToRefresh = function PullToRefresh(_param) {\n  var children = _param.children,\n      isFetching = _param.isFetching,\n      onRefresh = _param.onRefresh,\n      className = _param.className,\n      restProps = _object_without_properties(_param, [\"children\", \"isFetching\", \"onRefresh\", \"className\"]);\n\n  var platform = usePlatform();\n  var scroll = useScroll();\n  var document = useDOM().document;\n  var prevIsFetching = usePrevious(isFetching);\n  var initParams = React.useMemo(function () {\n    return {\n      start: platform === Platform.IOS ? -10 : -45,\n      max: platform === Platform.IOS ? 50 : 80,\n      maxY: platform === Platform.IOS ? 400 : 80,\n      refreshing: platform === Platform.IOS ? 36 : 50,\n      positionMultiplier: platform === Platform.IOS ? 0.21 : 1\n    };\n  }, [platform]);\n\n  var _React_useState = _sliced_to_array(React.useState(initParams.start), 2),\n      spinnerY = _React_useState[0],\n      setSpinnerY = _React_useState[1];\n\n  var _React_useState1 = _sliced_to_array(React.useState(false), 2),\n      watching = _React_useState1[0],\n      setWatching = _React_useState1[1];\n\n  var _React_useState2 = _sliced_to_array(React.useState(false), 2),\n      refreshing = _React_useState2[0],\n      setRefreshing = _React_useState2[1];\n\n  var _React_useState3 = _sliced_to_array(React.useState(false), 2),\n      canRefresh = _React_useState3[0],\n      setCanRefresh = _React_useState3[1];\n\n  var _React_useState4 = _sliced_to_array(React.useState(false), 2),\n      touchDown = _React_useState4[0],\n      setTouchDown = _React_useState4[1];\n\n  var prevTouchDown = usePrevious(touchDown);\n  var touchY = React.useRef(0);\n\n  var _React_useState5 = _sliced_to_array(React.useState(0), 2),\n      contentShift = _React_useState5[0],\n      setContentShift = _React_useState5[1];\n\n  var _React_useState6 = _sliced_to_array(React.useState(0), 2),\n      spinnerProgress = _React_useState6[0],\n      setSpinnerProgress = _React_useState6[1];\n\n  var onWindowTouchMove = function onWindowTouchMove(event) {\n    if (refreshing) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  useGlobalEventListener(document, \"touchmove\", onWindowTouchMove, TOUCH_MOVE_EVENT_PARAMS);\n  var resetRefreshingState = React.useCallback(function () {\n    setWatching(false);\n    setCanRefresh(false);\n    setRefreshing(false);\n    setSpinnerY(initParams.start);\n    setSpinnerProgress(0);\n    setContentShift(0);\n  }, [initParams]);\n  var onRefreshingFinish = React.useCallback(function () {\n    if (!touchDown) {\n      resetRefreshingState();\n    }\n  }, [touchDown, resetRefreshingState]);\n\n  var _useTimeout = useTimeout(onRefreshingFinish, 1000),\n      setWaitFetchingTimeout = _useTimeout.set,\n      clearWaitFetchingTimeout = _useTimeout.clear;\n\n  useIsomorphicLayoutEffect(function () {\n    if (prevIsFetching !== undefined && prevIsFetching && !isFetching) {\n      onRefreshingFinish();\n    }\n  }, [prevIsFetching, isFetching, onRefreshingFinish]);\n  useIsomorphicLayoutEffect(function () {\n    if (prevIsFetching !== undefined && !prevIsFetching && isFetching) {\n      clearWaitFetchingTimeout();\n    }\n  }, [isFetching, prevIsFetching, clearWaitFetchingTimeout]);\n  var runRefreshing = React.useCallback(function () {\n    if (!refreshing && onRefresh) {\n      // cleanup if the consumer does not start fetching in 1s\n      setWaitFetchingTimeout();\n      setRefreshing(true);\n      setSpinnerY(function (prevSpinnerY) {\n        return platform === Platform.IOS ? prevSpinnerY : initParams.refreshing;\n      });\n      var runTapticImpactOccurredCalled = onRefresh(); // TODO [>=6]: удалить блок кода (#5049)\n\n      if (!runTapticImpactOccurredCalled) {\n        runTapticImpactOccurred(\"light\");\n      }\n    }\n  }, [refreshing, onRefresh, setWaitFetchingTimeout, platform, initParams.refreshing]);\n  useIsomorphicLayoutEffect(function () {\n    if (prevTouchDown !== undefined && prevTouchDown && !touchDown) {\n      if (!refreshing && canRefresh) {\n        runRefreshing();\n      } else if (refreshing && !isFetching) {\n        // only iOS can start refresh before gesture end\n        resetRefreshingState();\n      } else {\n        // refreshing && isFetching: refresh in progress\n        // OR !refreshing && !canRefresh: pull was not strong enough\n        setSpinnerY(refreshing ? initParams.refreshing : initParams.start);\n        setSpinnerProgress(0);\n        setContentShift(0);\n      }\n    }\n  }, [initParams, prevIsFetching, isFetching, onRefreshingFinish, prevTouchDown, touchDown, refreshing, canRefresh, runRefreshing]);\n\n  var onTouchStart = function onTouchStart(e) {\n    if (refreshing) {\n      cancelEvent(e);\n    }\n\n    setTouchDown(true);\n  };\n\n  var onTouchMove = function onTouchMove(e) {\n    var _scroll;\n\n    var isY = e.isY,\n        shiftY = e.shiftY;\n    var start = initParams.start,\n        max = initParams.max;\n    var pageYOffset = (_scroll = scroll) === null || _scroll === void 0 ? void 0 : _scroll.getScroll().y;\n\n    if (watching && touchDown) {\n      cancelEvent(e);\n      var positionMultiplier = initParams.positionMultiplier,\n          maxY = initParams.maxY;\n      var shift = Math.max(0, shiftY - touchY.current);\n      var currentY = clamp(start + shift * positionMultiplier, start, maxY);\n      var progress = currentY > -10 ? Math.abs((currentY + 10) / max) * 80 : 0;\n      setSpinnerY(currentY);\n      setSpinnerProgress(clamp(progress, 0, 80));\n      setCanRefresh(progress > 80);\n      setContentShift((currentY + 10) * 2.3);\n\n      if (progress > 85 && !refreshing && platform === Platform.IOS) {\n        runRefreshing();\n      }\n    } else if (isY && pageYOffset === 0 && shiftY > 0 && !refreshing && touchDown) {\n      cancelEvent(e);\n      touchY.current = shiftY;\n      setWatching(true);\n      setSpinnerY(start);\n      setSpinnerProgress(0);\n    }\n  };\n\n  var onTouchEnd = function onTouchEnd() {\n    setWatching(false);\n    setTouchDown(false);\n  };\n\n  var spinnerTransform = \"translate3d(0, \".concat(spinnerY, \"px, 0)\");\n  var contentTransform = \"\";\n\n  if (platform === Platform.IOS && refreshing && !touchDown) {\n    contentTransform = \"translate3d(0, 100px, 0)\";\n  } else if (platform === Platform.IOS && (contentShift || refreshing)) {\n    contentTransform = \"translate3d(0, \".concat(contentShift, \"px, 0)\");\n  }\n\n  return /*#__PURE__*/React.createElement(TouchRootContext.Provider, {\n    value: true\n  }, /*#__PURE__*/React.createElement(Touch, _object_spread_props(_object_spread({}, restProps), {\n    onStart: onTouchStart,\n    onMove: onTouchMove,\n    onEnd: onTouchEnd,\n    className: classNames(\"vkuiPullToRefresh\", platform === Platform.IOS && \"vkuiPullToRefresh--ios\", watching && \"vkuiPullToRefresh--watching\", refreshing && \"vkuiPullToRefresh--refreshing\", className)\n  }), /*#__PURE__*/React.createElement(FixedLayout, {\n    className: \"vkuiPullToRefresh__controls\",\n    useParentWidth: true\n  }, /*#__PURE__*/React.createElement(PullToRefreshSpinner, {\n    style: {\n      transform: spinnerTransform,\n      WebkitTransform: spinnerTransform,\n      opacity: watching || refreshing || canRefresh ? 1 : 0\n    },\n    on: refreshing,\n    progress: refreshing ? undefined : spinnerProgress\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiPullToRefresh__content\",\n    style: {\n      transform: contentTransform,\n      WebkitTransform: contentTransform\n    }\n  }, children)));\n};","map":{"version":3,"mappings":"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","names":["React","classNames","clamp","useGlobalEventListener","usePlatform","usePrevious","useTimeout","useDOM","Platform","runTapticImpactOccurred","useIsomorphicLayoutEffect","useScroll","FixedLayout","Touch","TouchRootContext","PullToRefreshSpinner","cancelEvent","event","originalEvent","preventDefault","cancelable","stopPropagation","TOUCH_MOVE_EVENT_PARAMS","passive","PullToRefresh","children","isFetching","onRefresh","className","restProps","platform","scroll","document","prevIsFetching","initParams","useMemo","start","IOS","max","maxY","refreshing","positionMultiplier","useState","spinnerY","setSpinnerY","watching","setWatching","setRefreshing","canRefresh","setCanRefresh","touchDown","setTouchDown","prevTouchDown","touchY","useRef","contentShift","setContentShift","spinnerProgress","setSpinnerProgress","onWindowTouchMove","resetRefreshingState","useCallback","onRefreshingFinish","set","setWaitFetchingTimeout","clear","clearWaitFetchingTimeout","undefined","runRefreshing","prevSpinnerY","runTapticImpactOccurredCalled","onTouchStart","e","onTouchMove","isY","shiftY","pageYOffset","getScroll","y","shift","Math","current","currentY","progress","abs","onTouchEnd","spinnerTransform","concat","contentTransform","Provider","value","onStart","onMove","onEnd","useParentWidth","style","transform","WebkitTransform","opacity","on","div"],"sources":["C:\\Users\\Я\\Desktop\\myproject\\vk-miniapps\\Koto-app\\node_modules\\@vkontakte\\vkui\\src\\components\\PullToRefresh\\PullToRefresh.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames } from '@vkontakte/vkjs';\nimport { clamp } from '../../helpers/math';\nimport { useGlobalEventListener } from '../../hooks/useGlobalEventListener';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { usePrevious } from '../../hooks/usePrevious';\nimport { useTimeout } from '../../hooks/useTimeout';\nimport { DOMProps, useDOM } from '../../lib/dom';\nimport { Platform } from '../../lib/platform';\nimport { runTapticImpactOccurred } from '../../lib/taptic';\nimport { useIsomorphicLayoutEffect } from '../../lib/useIsomorphicLayoutEffect';\nimport { AnyFunction, HasChildren } from '../../types';\nimport { ScrollContextInterface, useScroll } from '../AppRoot/ScrollContext';\nimport { FixedLayout } from '../FixedLayout/FixedLayout';\nimport { Touch, TouchEvent, TouchProps } from '../Touch/Touch';\nimport TouchRootContext from '../Touch/TouchContext';\nimport { PullToRefreshSpinner } from './PullToRefreshSpinner';\nimport styles from './PullToRefresh.module.css';\n\nfunction cancelEvent(event: any) {\n  if (!event) {\n    return false;\n  }\n  while (event.originalEvent) {\n    event = event.originalEvent;\n  }\n  if (event.preventDefault && event.cancelable) {\n    event.preventDefault();\n  }\n  if (event.stopPropagation) {\n    event.stopPropagation();\n  }\n  return false;\n}\n\nexport interface PullToRefreshProps extends DOMProps, TouchProps, HasChildren {\n  /**\n   * Будет вызвана для обновления контента (прим.: функция должна быть мемоизированным коллбэком)\n   *\n   * > ⚠️ **Для разработчиков VK Mini Apps**\n   * >\n   * > Сейчас метод под конец выполнения вызывает `runTapticImpactOccurred()`.\n   * >\n   * > В **v6** нужно будет самостоятельно вызывать эту функцию в вашем обработчике `onRefresh()`.\n   * > (см. https://github.com/VKCOM/VKUI/issues/5049). Функцию можете импортировать её из\n   * > бибилиотеки `@vkontakte/vk-bridge-react`.\n   * >\n   * > Чтобы подготовить ваше мини-приложение к обновлению до **v6**, в рамках **v5** вы уже можете\n   * > вызывать `runTapticImpactOccurred()`, но с одним условием: вы должны вернуть результат\n   * > выполнения функции, чтобы исключить двойной вызов. Результат функции — `boolean`. Если\n   * > вернётся `true`, значит, вызывать `runTapticImpactOccurred()` снова со стороны **VKUI** —\n   * > не нужно.\n   * >\n   * > ```jsx\n   * > const onRefresh = React.useCallback(() => {\n   * >  // ...\n   * >  return runTapticImpactOccurred();\n   * > }, []);\n   * >\n   * > // <PullToRefresh onRefresh={onRefresh} />\n   * > ```\n   * >\n   * > Соответственно, в **v6** ничего возвращать уже не потребуется.\n   */\n  onRefresh: AnyFunction;\n  /**\n   * Определяет, выполняется ли обновление. Для скрытия спиннера после получения контента необходимо передать `false`\n   */\n  isFetching?: boolean;\n  /** @ignore */\n  scroll?: ScrollContextInterface;\n}\n\nconst TOUCH_MOVE_EVENT_PARAMS = {\n  cancelable: true,\n  passive: false,\n};\n\n/**\n * @see https://vkcom.github.io/VKUI/#/PullToRefresh\n */\nexport const PullToRefresh = ({\n  children,\n  isFetching,\n  onRefresh,\n  className,\n  ...restProps\n}: PullToRefreshProps) => {\n  const platform = usePlatform();\n  const scroll = useScroll();\n  const { document } = useDOM();\n  const prevIsFetching = usePrevious(isFetching);\n\n  const initParams = React.useMemo(\n    () => ({\n      start: platform === Platform.IOS ? -10 : -45,\n      max: platform === Platform.IOS ? 50 : 80,\n      maxY: platform === Platform.IOS ? 400 : 80,\n      refreshing: platform === Platform.IOS ? 36 : 50,\n      positionMultiplier: platform === Platform.IOS ? 0.21 : 1,\n    }),\n    [platform],\n  );\n\n  const [spinnerY, setSpinnerY] = React.useState(initParams.start);\n  const [watching, setWatching] = React.useState(false);\n  const [refreshing, setRefreshing] = React.useState(false);\n  const [canRefresh, setCanRefresh] = React.useState(false);\n  const [touchDown, setTouchDown] = React.useState(false);\n  const prevTouchDown = usePrevious(touchDown);\n\n  const touchY = React.useRef(0);\n  const [contentShift, setContentShift] = React.useState(0);\n  const [spinnerProgress, setSpinnerProgress] = React.useState(0);\n\n  const onWindowTouchMove = (event: Event) => {\n    if (refreshing) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  useGlobalEventListener(document, 'touchmove', onWindowTouchMove, TOUCH_MOVE_EVENT_PARAMS);\n\n  const resetRefreshingState = React.useCallback(() => {\n    setWatching(false);\n    setCanRefresh(false);\n    setRefreshing(false);\n    setSpinnerY(initParams.start);\n    setSpinnerProgress(0);\n    setContentShift(0);\n  }, [initParams]);\n\n  const onRefreshingFinish = React.useCallback(() => {\n    if (!touchDown) {\n      resetRefreshingState();\n    }\n  }, [touchDown, resetRefreshingState]);\n\n  const { set: setWaitFetchingTimeout, clear: clearWaitFetchingTimeout } = useTimeout(\n    onRefreshingFinish,\n    1000,\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    if (prevIsFetching !== undefined && prevIsFetching && !isFetching) {\n      onRefreshingFinish();\n    }\n  }, [prevIsFetching, isFetching, onRefreshingFinish]);\n\n  useIsomorphicLayoutEffect(() => {\n    if (prevIsFetching !== undefined && !prevIsFetching && isFetching) {\n      clearWaitFetchingTimeout();\n    }\n  }, [isFetching, prevIsFetching, clearWaitFetchingTimeout]);\n\n  const runRefreshing = React.useCallback(() => {\n    if (!refreshing && onRefresh) {\n      // cleanup if the consumer does not start fetching in 1s\n      setWaitFetchingTimeout();\n\n      setRefreshing(true);\n      setSpinnerY((prevSpinnerY) =>\n        platform === Platform.IOS ? prevSpinnerY : initParams.refreshing,\n      );\n\n      const runTapticImpactOccurredCalled = onRefresh();\n      // TODO [>=6]: удалить блок кода (#5049)\n      if (!runTapticImpactOccurredCalled) {\n        runTapticImpactOccurred('light');\n      }\n    }\n  }, [refreshing, onRefresh, setWaitFetchingTimeout, platform, initParams.refreshing]);\n\n  useIsomorphicLayoutEffect(() => {\n    if (prevTouchDown !== undefined && prevTouchDown && !touchDown) {\n      if (!refreshing && canRefresh) {\n        runRefreshing();\n      } else if (refreshing && !isFetching) {\n        // only iOS can start refresh before gesture end\n        resetRefreshingState();\n      } else {\n        // refreshing && isFetching: refresh in progress\n        // OR !refreshing && !canRefresh: pull was not strong enough\n        setSpinnerY(refreshing ? initParams.refreshing : initParams.start);\n        setSpinnerProgress(0);\n        setContentShift(0);\n      }\n    }\n  }, [\n    initParams,\n    prevIsFetching,\n    isFetching,\n    onRefreshingFinish,\n    prevTouchDown,\n    touchDown,\n    refreshing,\n    canRefresh,\n    runRefreshing,\n  ]);\n\n  const onTouchStart = (e: TouchEvent) => {\n    if (refreshing) {\n      cancelEvent(e);\n    }\n    setTouchDown(true);\n  };\n\n  const onTouchMove = (e: TouchEvent) => {\n    const { isY, shiftY } = e;\n    const { start, max } = initParams;\n    const pageYOffset = scroll?.getScroll().y;\n\n    if (watching && touchDown) {\n      cancelEvent(e);\n\n      const { positionMultiplier, maxY } = initParams;\n\n      const shift = Math.max(0, shiftY - touchY.current);\n\n      const currentY = clamp(start + shift * positionMultiplier, start, maxY);\n      const progress = currentY > -10 ? Math.abs((currentY + 10) / max) * 80 : 0;\n\n      setSpinnerY(currentY);\n      setSpinnerProgress(clamp(progress, 0, 80));\n      setCanRefresh(progress > 80);\n      setContentShift((currentY + 10) * 2.3);\n\n      if (progress > 85 && !refreshing && platform === Platform.IOS) {\n        runRefreshing();\n      }\n    } else if (isY && pageYOffset === 0 && shiftY > 0 && !refreshing && touchDown) {\n      cancelEvent(e);\n\n      touchY.current = shiftY;\n      setWatching(true);\n      setSpinnerY(start);\n      setSpinnerProgress(0);\n    }\n  };\n\n  const onTouchEnd = () => {\n    setWatching(false);\n    setTouchDown(false);\n  };\n\n  const spinnerTransform = `translate3d(0, ${spinnerY}px, 0)`;\n  let contentTransform = '';\n\n  if (platform === Platform.IOS && refreshing && !touchDown) {\n    contentTransform = 'translate3d(0, 100px, 0)';\n  } else if (platform === Platform.IOS && (contentShift || refreshing)) {\n    contentTransform = `translate3d(0, ${contentShift}px, 0)`;\n  }\n\n  return (\n    <TouchRootContext.Provider value={true}>\n      <Touch\n        {...restProps}\n        onStart={onTouchStart}\n        onMove={onTouchMove}\n        onEnd={onTouchEnd}\n        className={classNames(\n          styles['PullToRefresh'],\n          platform === Platform.IOS && styles['PullToRefresh--ios'],\n          watching && styles['PullToRefresh--watching'],\n          refreshing && styles['PullToRefresh--refreshing'],\n          className,\n        )}\n      >\n        <FixedLayout className={styles['PullToRefresh__controls']} useParentWidth>\n          <PullToRefreshSpinner\n            style={{\n              transform: spinnerTransform,\n              WebkitTransform: spinnerTransform,\n              opacity: watching || refreshing || canRefresh ? 1 : 0,\n            }}\n            on={refreshing}\n            progress={refreshing ? undefined : spinnerProgress}\n          />\n        </FixedLayout>\n\n        <div\n          className={styles['PullToRefresh__content']}\n          style={{\n            transform: contentTransform,\n            WebkitTransform: contentTransform,\n          }}\n        >\n          {children}\n        </div>\n      </Touch>\n    </TouchRootContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}