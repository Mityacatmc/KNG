{"ast":null,"code":"import * as React from \"react\";\nimport { getTitleFromChildren } from \"./utils\";\n\nvar findAllIncludes = function findAllIncludes() {\n  var target = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\",\n      search = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"\";\n  var includes = [];\n  var i = target.indexOf(search);\n\n  while (i !== -1) {\n    includes.push(i);\n    i = target.indexOf(search, i + 1);\n  }\n\n  return includes;\n};\n\nvar letterRegexp; // На момент написания флаг u не поддерживался рядом браузеров, поэтому добавили фоллбэк.\n\ntry {\n  letterRegexp = new RegExp(\"\\\\p{L}\", \"u\");\n} catch (e) {}\n\nvar _getOptionLabel = function _getOptionLabel(option) {\n  return getTitleFromChildren(option.label);\n};\n\nexport var defaultFilterFn = function defaultFilterFn() {\n  var query = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"\",\n      option = arguments.length > 1 ? arguments[1] : void 0,\n      getOptionLabel = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _getOptionLabel;\n\n  var _getOptionLabel1, _label;\n\n  query = query.toLocaleLowerCase();\n  var label = (_getOptionLabel1 = getOptionLabel(option)) === null || _getOptionLabel1 === void 0 ? void 0 : _getOptionLabel1.toLocaleLowerCase();\n\n  if ((_label = label) === null || _label === void 0 ? void 0 : _label.startsWith(query)) {\n    return true;\n  }\n\n  var includes = findAllIncludes(label, query); // Ищем вхождение перед началом которого не буква\n\n  if (letterRegexp && label) {\n    var _iteratorNormalCompletion = true,\n        _didIteratorError = false,\n        _iteratorError = undefined;\n\n    try {\n      for (var _iterator = includes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var index = _step.value;\n\n        if (!letterRegexp.test(label[index - 1])) {\n          return true;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  } else {\n    // если regexp не поддерживается, то ищем любое вхождение\n    return includes.length > 0;\n  }\n\n  return false;\n};\nexport var getFormFieldModeFromSelectType = function getFormFieldModeFromSelectType() {\n  var selectType = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : \"default\";\n  return selectType === \"default\" ? \"default\" : \"plain\";\n};","map":{"version":3,"mappings":"AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,oBAAT,QAAqC,SAArC;;AAOA,IAAMC,kBAAkB,SAAlBA,eAAkB;MAACC,0EAAS;MAAIC,0EAAS;EAC7C,IAAMC,WAAW,EAAjB;EAEA,IAAIC,IAAIH,OAAOI,OAAPJ,CAAeC,MAAfD,CAAR;;EACA,OAAOG,MAAM,CAAC,CAAd,EAAiB;IACfD,SAASG,IAATH,CAAcC,CAAdD;IACAC,IAAIH,OAAOI,OAAPJ,CAAeC,MAAfD,EAAuBG,IAAI,CAA3BH,CAAJG;EACF;;EAEA,OAAOD,QAAP;AACF,CAVA;;AAYA,IAAII,YAAJ,C,CAEA;;AACA,IAAI;EACFA,eAAe,IAAIC,MAAJ,CAAW,QAAX,EAAqB,GAArB,CAAfD;AACF,CAFA,CAEE,OAAOE,CAAP,EAAU,CAAC;;AAIb,IAAMC,kBAAkC,SAAlCA,eAAkC,CAACC,MAAD,EAACA;SAAWZ,qBAAqBY,OAAOC,KAA5Bb;CAApD;;AAEA,OAAO,IAAMc,kBAAkB,SAAlBA,eAAkB;MAC7BC,yEAAQ;MACRH;MACAI,kFAAiCL;;MAGrBK,kBAERH;;EAHJE,QAAQA,MAAME,iBAANF,EAARA;EACA,IAAIF,SAAQG,kCAAeJ,MAAfI,CAARH,MAAuBD,IAAvBC,IAAQG,2BAARH,GAAQG,MAARH,GAAQG,iBAAwBC,iBAAxBD,EAAZ;;EAEA,KAAIH,cAAJ,MAAIA,IAAJ,IAAIA,iBAAJ,GAAIA,MAAJ,GAAIA,OAAOK,UAAPL,CAAkBE,KAAlBF,CAAJ,EAA8B;IAC5B,OAAO,IAAP;EACF;;EAEA,IAAMT,WAAWH,gBAAgBY,KAAhBZ,EAAuBc,KAAvBd,CAAjB,CAZ6B,CAc7B;;EACA,IAAIO,gBAAgBK,KAApB,EAA2B;QACpBM;QAAAC;QAAAC;;;MAAL,SAAKC,YAAelB,2BAApB,EAAKmB,KAAL,EAAK,8DAAL,EAAKJ,gCAAL,EAA8B;QAAzB,IAAMK,QAAND;;QACH,IAAI,CAACf,aAAaiB,IAAbjB,CAAkBK,KAAK,CAACW,QAAQ,CAAT,CAAvBhB,CAAL,EAA0C;UACxC,OAAO,IAAP;QACF;MACF;;MAJKY;MAAAC;;;aAAAF;UAAAG;;;YAAAF;gBAAAC;;;;EAKP,CANA,MAMO;IACL;IACA,OAAOjB,SAASsB,MAATtB,GAAkB,CAAzB;EACF;;EAEA,OAAO,KAAP;AACF,CA3BO;AA6BP,OAAO,IAAMuB,iCAAiC,SAAjCA,8BAAiC;MAACC,8EAAyB;EACtE,OAAOA,eAAe,SAAfA,GAA2B,SAA3BA,GAAuC,OAA9C;AACF,CAFO","names":["React","getTitleFromChildren","findAllIncludes","target","search","includes","i","indexOf","push","letterRegexp","RegExp","e","_getOptionLabel","option","label","defaultFilterFn","query","getOptionLabel","toLocaleLowerCase","startsWith","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","index","test","length","getFormFieldModeFromSelectType","selectType"],"sources":["C:\\Users\\Я\\Desktop\\myproject\\vk-miniapps\\Koto-app\\node_modules\\@vkontakte\\vkui\\src\\lib\\select.ts"],"sourcesContent":["import * as React from 'react';\nimport { SelectType } from '../components/Select/Select';\nimport { getTitleFromChildren } from './utils';\n\ntype Option = {\n  label?: React.ReactElement | string;\n  [index: string]: any;\n};\n\nconst findAllIncludes = (target = '', search = '') => {\n  const includes = [];\n\n  let i = target.indexOf(search);\n  while (i !== -1) {\n    includes.push(i);\n    i = target.indexOf(search, i + 1);\n  }\n\n  return includes;\n};\n\nlet letterRegexp: RegExp;\n\n// На момент написания флаг u не поддерживался рядом браузеров, поэтому добавили фоллбэк.\ntry {\n  letterRegexp = new RegExp('\\\\p{L}', 'u');\n} catch (e) {}\n\ntype GetOptionLabel = (option: Option) => string | undefined;\n\nconst _getOptionLabel: GetOptionLabel = (option) => getTitleFromChildren(option.label);\n\nexport const defaultFilterFn = (\n  query = '',\n  option: Option,\n  getOptionLabel: GetOptionLabel = _getOptionLabel,\n) => {\n  query = query.toLocaleLowerCase();\n  let label = getOptionLabel(option)?.toLocaleLowerCase();\n\n  if (label?.startsWith(query)) {\n    return true;\n  }\n\n  const includes = findAllIncludes(label, query);\n\n  // Ищем вхождение перед началом которого не буква\n  if (letterRegexp && label) {\n    for (const index of includes) {\n      if (!letterRegexp.test(label[index - 1])) {\n        return true;\n      }\n    }\n  } else {\n    // если regexp не поддерживается, то ищем любое вхождение\n    return includes.length > 0;\n  }\n\n  return false;\n};\n\nexport const getFormFieldModeFromSelectType = (selectType: SelectType = 'default') => {\n  return selectType === 'default' ? 'default' : 'plain';\n};\n"]},"metadata":{},"sourceType":"module"}