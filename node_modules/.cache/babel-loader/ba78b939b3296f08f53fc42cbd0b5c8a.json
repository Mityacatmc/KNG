{"ast":null,"code":"import * as React from \"react\";\nimport { hasHover as hasHoverLib } from \"@vkontakte/vkjs\";\nimport { AdaptivityContext } from \"../components/AdaptivityProvider/AdaptivityContext\";\nimport { useIsClient } from \"./useIsClient\";\nexport function useAdaptivityHasHover() {\n  var deferDetect = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;\n\n  var _React_useContext = React.useContext(AdaptivityContext),\n      hasHoverContext = _React_useContext.hasHover;\n\n  var hasHover = hasHoverContext === undefined ? hasHoverLib : hasHoverContext;\n  var needTwoPassRendering = deferDetect || hasHoverContext === undefined;\n  var isClient = useIsClient(!needTwoPassRendering);\n\n  if (!isClient || hasHoverContext !== undefined) {\n    return hasHoverContext;\n  }\n\n  return hasHover;\n}","map":{"version":3,"mappings":"AAAA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAYC,WAArB,QAAwC,iBAAxC;AACA,SAASC,iBAAT,QAAkC,oDAAlC;AACA,SAASC,WAAT,QAA4B,eAA5B;AAUA,OAAO,SAASC,qBAAT,GAASA;MAAsBC,+EAAc;;EAClD,IAAsCN,0BAAMO,UAANP,CAAiBG,iBAAjBH,CAAtC;EAAA,IAAQC,eAAUO,GAAoBR,kBAA9BC,QAAR;;EACA,IAAMA,WAAWO,oBAAoBC,SAApBD,GAAgCN,WAAhCM,GAA8CA,eAA/D;EAEA,IAAME,uBAAuBJ,eAAeE,oBAAoBC,SAAhE;EAEA,IAAME,WAAWP,YAAY,CAACM,oBAAbN,CAAjB;;EACA,IAAI,CAACO,QAAD,IAAaH,oBAAoBC,SAArC,EAAgD;IAC9C,OAAOD,eAAP;EACF;;EAEA,OAAOP,QAAP;AACF","names":["React","hasHover","hasHoverLib","AdaptivityContext","useIsClient","useAdaptivityHasHover","deferDetect","useContext","hasHoverContext","undefined","needTwoPassRendering","isClient"],"sources":["C:\\Users\\Я\\Desktop\\myproject\\vk-miniapps\\Koto-app\\node_modules\\@vkontakte\\vkui\\src\\hooks\\useAdaptivityHasHover.ts"],"sourcesContent":["import * as React from 'react';\nimport { hasHover as hasHoverLib } from '@vkontakte/vkjs';\nimport { AdaptivityContext } from '../components/AdaptivityProvider/AdaptivityContext';\nimport { useIsClient } from './useIsClient';\n\n/**\n * Определение происходит с помощью `window.matchMedia`. Для того, чтобы не было ошибок при гидратации, по умолчанию\n * откладываем определение на второй рендер.\n *\n * [No SSR] Если передать `false`, то определение будет сразу.\n */\nexport function useAdaptivityHasHover(deferDetect?: true): undefined | boolean;\nexport function useAdaptivityHasHover(deferDetect?: false): boolean;\nexport function useAdaptivityHasHover(deferDetect = true): undefined | boolean {\n  const { hasHover: hasHoverContext } = React.useContext(AdaptivityContext);\n  const hasHover = hasHoverContext === undefined ? hasHoverLib : hasHoverContext;\n\n  const needTwoPassRendering = deferDetect || hasHoverContext === undefined;\n\n  const isClient = useIsClient(!needTwoPassRendering);\n  if (!isClient || hasHoverContext !== undefined) {\n    return hasHoverContext;\n  }\n\n  return hasHover;\n}\n"]},"metadata":{},"sourceType":"module"}