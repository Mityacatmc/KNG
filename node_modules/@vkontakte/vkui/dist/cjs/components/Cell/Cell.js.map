{"version":3,"sources":["../../../../src/components/Cell/Cell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, noop } from '@vkontakte/vkjs';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { Platform } from '../../lib/platform';\nimport { HasRootRef } from '../../types';\nimport { ListContext } from '../List/ListContext';\nimport { Removable, RemovableProps } from '../Removable/Removable';\nimport { SimpleCell, SimpleCellProps } from '../SimpleCell/SimpleCell';\nimport { CellCheckbox, CellCheckboxProps } from './CellCheckbox/CellCheckbox';\nimport { CellDragger } from './CellDragger/CellDragger';\nimport { useDraggable } from './useDraggable';\nimport styles from './Cell.module.css';\n\nexport interface CellProps\n  extends Omit<SimpleCellProps, 'getRootRef'>,\n    RemovableProps,\n    HasRootRef<HTMLDivElement> {\n  mode?: 'removable' | 'selectable';\n  /**\n   * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет\n   */\n  draggable?: boolean;\n  /**\n   * Имя для input в режиме selectable\n   */\n  name?: string;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса cheсked, как зависящий напрямую от входящего значения\n   */\n  checked?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса defaultChecked как неконтролируемый компонент\n   */\n  defaultChecked?: boolean;\n  /**\n   * Коллбэк срабатывает при завершении перетаскивания.\n   * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.\n   * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице\n   * есть рабочий пример с обработкой этих чисел и перерисовкой списка.\n   */\n  onDragFinish?: ({ from, to }: { from: number; to: number }) => void;\n  /**\n   * aria-label для кнопки перетаскивания ячейки\n   */\n  draggerLabel?: string;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/Cell\n */\nexport const Cell = ({\n  mode,\n  onRemove = noop,\n  removePlaceholder = 'Удалить',\n  onDragFinish,\n  before,\n  after,\n  disabled,\n  draggable,\n  Component: ComponentProps,\n  onChange,\n  name,\n  value,\n  checked,\n  defaultChecked,\n  getRootRef,\n  draggerLabel = 'Перенести ячейку',\n  className,\n  style,\n  ...restProps\n}: CellProps) => {\n  const selectable = mode === 'selectable';\n  const removable = mode === 'removable';\n  const Component = selectable ? 'label' : ComponentProps;\n\n  const platform = usePlatform();\n\n  const rootElRef = useExternRef(getRootRef);\n\n  const { dragging, ...draggableProps } = useDraggable({\n    rootElRef,\n    onDragFinish,\n  });\n\n  const { toggleDrag } = React.useContext(ListContext);\n  React.useEffect(() => {\n    if (dragging) {\n      toggleDrag(true);\n      return () => toggleDrag(false);\n    }\n    return undefined;\n  }, [dragging, toggleDrag]);\n\n  let dragger;\n  if (draggable) {\n    dragger = (\n      <CellDragger\n        className={styles['Cell__dragger']}\n        aria-label={draggerLabel}\n        {...draggableProps}\n      />\n    );\n  }\n\n  let checkbox;\n  if (selectable) {\n    const checkboxProps: CellCheckboxProps = {\n      name,\n      value,\n      onChange,\n      defaultChecked,\n      checked,\n      disabled,\n    };\n    checkbox = <CellCheckbox className={styles['Cell__checkbox']} {...checkboxProps} />;\n  }\n\n  const simpleCellDisabled = (draggable && !selectable) || removable || disabled;\n  const hasActive = !simpleCellDisabled && !dragging;\n\n  const cellClasses = classNames(\n    styles['Cell'],\n    platform === Platform.IOS && styles['Cell--ios'],\n    dragging && styles['Cell--dragging'],\n    removable && styles['Cell--removable'],\n    Component === 'label' && styles['Cell--selectable'],\n    disabled && styles['Cell--disabled'],\n  );\n\n  const simpleCell = (\n    <SimpleCell\n      hasActive={hasActive}\n      hasHover={hasActive}\n      {...restProps}\n      className={styles['Cell__content']}\n      disabled={simpleCellDisabled}\n      Component={Component}\n      before={\n        <React.Fragment>\n          {draggable && platform !== Platform.IOS && dragger}\n          {selectable && checkbox}\n          {before}\n        </React.Fragment>\n      }\n      after={\n        <React.Fragment>\n          {draggable && platform === Platform.IOS && dragger}\n          {after}\n        </React.Fragment>\n      }\n    />\n  );\n\n  if (removable) {\n    return (\n      <Removable\n        className={classNames(cellClasses, className)}\n        style={style}\n        getRootRef={rootElRef}\n        removePlaceholder={removePlaceholder}\n        onRemove={(e) => onRemove(e, rootElRef.current)}\n      >\n        {simpleCell}\n      </Removable>\n    );\n  }\n\n  return (\n    <div className={classNames(cellClasses, className)} style={style} ref={rootElRef}>\n      {simpleCell}\n    </div>\n  );\n};\n\nCell.Checkbox = CellCheckbox;\n"],"names":["Cell","mode","onRemove","noop","removePlaceholder","onDragFinish","before","after","disabled","draggable","Component","ComponentProps","onChange","name","value","checked","defaultChecked","getRootRef","draggerLabel","className","style","restProps","selectable","removable","platform","usePlatform","rootElRef","useExternRef","useDraggable","dragging","draggableProps","toggleDrag","React","useContext","ListContext","useEffect","undefined","dragger","CellDragger","aria-label","checkbox","checkboxProps","CellCheckbox","simpleCellDisabled","hasActive","cellClasses","classNames","Platform","IOS","simpleCell","SimpleCell","hasHover","Fragment","Removable","e","current","div","ref","Checkbox"],"mappings":";;;;+BAmDaA;;;eAAAA;;;;;;;+DAnDU;oBACU;4BACJ;2BACD;wBACH;2BAEG;yBACc;0BACE;4BACI;2BACpB;4BACC;AAwCtB,IAAMA,OAAO;QAClBC,cAAAA,+BACAC,UAAAA,wCAAWC,UAAI,sDACfC,mBAAAA,0DAAoB,sCACpBC,sBAAAA,cACAC,gBAAAA,QACAC,eAAAA,OACAC,kBAAAA,UACAC,mBAAAA,WACAC,AAAWC,wBAAXD,WACAE,kBAAAA,UACAC,cAAAA,MACAC,eAAAA,OACAC,iBAAAA,SACAC,wBAAAA,gBACAC,oBAAAA,yCACAC,cAAAA,gDAAe,0CACfC,mBAAAA,WACAC,eAAAA,OACGC;QAlBHpB;QACAC;QACAE;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAE;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;;IAGA,IAAME,aAAarB,SAAS;IAC5B,IAAMsB,YAAYtB,SAAS;IAC3B,IAAMS,YAAYY,aAAa,UAAUX;IAEzC,IAAMa,WAAWC,IAAAA,wBAAW;IAE5B,IAAMC,YAAYC,IAAAA,0BAAY,EAACV;IAE/B,IAAwCW,iBAAAA,IAAAA,0BAAY,EAAC;QACnDF,WAAAA;QACArB,cAAAA;IACF,IAHM,AAAEwB,WAAgCD,eAAhCC,UAAaC,8CAAmBF;QAAhCC;;IAKR,IAAM,AAAEE,aAAeC,OAAMC,UAAU,CAACC,wBAAW,EAA3CH;IACRC,OAAMG,SAAS,CAAC;QACd,IAAIN,UAAU;YACZE,WAAW;YACX,OAAO;uBAAMA,WAAW;;QAC1B;QACA,OAAOK;IACT,GAAG;QAACP;QAAUE;KAAW;IAEzB,IAAIM;IACJ,IAAI5B,WAAW;QACb4B,wBACE,qBAACC,wBAAW;YACVnB,SAAS;YACToB,cAAYrB;WACRY;IAGV;IAEA,IAAIU;IACJ,IAAIlB,YAAY;QACd,IAAMmB,gBAAmC;YACvC5B,MAAAA;YACAC,OAAAA;YACAF,UAAAA;YACAI,gBAAAA;YACAD,SAAAA;YACAP,UAAAA;QACF;QACAgC,yBAAW,qBAACE,0BAAY;YAACvB,SAAS;WAAgCsB;IACpE;IAEA,IAAME,qBAAqB,AAAClC,aAAa,CAACa,cAAeC,aAAaf;IACtE,IAAMoC,YAAY,CAACD,sBAAsB,CAACd;IAE1C,IAAMgB,cAAcC,IAAAA,gBAAU,cAE5BtB,aAAauB,kBAAQ,CAACC,GAAG,qBACzBnB,kCACAN,oCACAb,cAAc,mCACdF;IAGF,IAAMyC,2BACJ,qBAACC,sBAAU;QACTN,WAAWA;QACXO,UAAUP;OACNvB;QACJF,SAAS;QACTX,UAAUmC;QACVjC,WAAWA;QACXJ,sBACE,qBAAC0B,OAAMoB,QAAQ,QACZ3C,aAAae,aAAauB,kBAAQ,CAACC,GAAG,IAAIX,SAC1Cf,cAAckB,UACdlC;QAGLC,qBACE,qBAACyB,OAAMoB,QAAQ,QACZ3C,aAAae,aAAauB,kBAAQ,CAACC,GAAG,IAAIX,SAC1C9B;;IAMT,IAAIgB,WAAW;QACb,qBACE,qBAAC8B,oBAAS;YACRlC,WAAW2B,IAAAA,gBAAU,EAACD,aAAa1B;YACnCC,OAAOA;YACPH,YAAYS;YACZtB,mBAAmBA;YACnBF,UAAU,SAACoD;uBAAMpD,SAASoD,GAAG5B,UAAU6B,OAAO;;WAE7CN;IAGP;IAEA,qBACE,qBAACO;QAAIrC,WAAW2B,IAAAA,gBAAU,EAACD,aAAa1B;QAAYC,OAAOA;QAAOqC,KAAK/B;OACpEuB;AAGP;AAEAjD,KAAK0D,QAAQ,GAAGhB,0BAAY"}